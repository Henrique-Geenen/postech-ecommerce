services:
  postgres-cliente:
    build:
        context: ./postgres-cliente
    container_name: postgres_cliente
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE_CLIENTE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USERNAME}
    ports:
      - 5432:5432
    networks:
      - postechnetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DATABASE_CLIENTE} -U $${POSTGRES_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-logistica:
    build:
      context: ./postgres-logistica
    container_name: postgres_logistica
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE_LOGISTICA}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USERNAME}
    ports:
      - 5433:5433
    networks:
      - postechnetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DATABASE_LOGISTICA} -U $${POSTGRES_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-pedido:
    build:
      context: ./postgres-pedido
    container_name: postgres_pedido
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE_PEDIDO}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USERNAME}
    ports:
      - 5434:5434
    networks:
      - postechnetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DATABASE_PEDIDO} -U $${POSTGRES_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-produto:
    build:
      context: ./postgres-produto
    container_name: postgres_produto
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE_PRODUTO}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USERNAME}
    ports:
      - 5435:5435
    networks:
      - postechnetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DATABASE_PRODUTO} -U $${POSTGRES_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - postechnetwork
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 5

  ms-cliente:
    build:
      context: ./ms-cliente
    container_name: ms_cliente
    env_file:
      - .env
    depends_on:
      postgres-cliente:
        condition: service_healthy
    ports:
      - 8081:8081
    environment:
      POSTGRES_URL: ${POSTGRES_URL_CLIENTE}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE_CLIENTE}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - postechnetwork

  ms-logistica:
    build:
      context: ./ms-logistica
    container_name: ms_logistica
    env_file:
      - .env
    depends_on:
      postgres-logistica:
        condition: service_healthy
    ports:
      - 8082:8082
    environment:
      POSTGRES_URL: ${POSTGRES_URL_LOGISTICA}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE_LOGISTICA}
      OPENROUTE_API_KEY: ${OPENROUTE_API_KEY}
      SERVICE_PEDIDO_URL: ${SERVICE_PEDIDO_URL}
    networks:
      - postechnetwork

  ms-pedido:
    build:
      context: ./ms-pedido
    container_name: ms_pedido
    env_file:
      - .env
    depends_on:
      postgres-pedido:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - 8083:8083
    environment:
      POSTGRES_URL: ${POSTGRES_URL_PEDIDO}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE_PEDIDO}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      SERVICE_CLIENTE_URL: ${SERVICE_CLIENTE_URL}
      SERVICE_PRODUTO_URL: ${SERVICE_PRODUTO_URL}
    networks:
      - postechnetwork

  ms-produto:
    build:
      context: ./ms-produto
    container_name: ms_produto
    env_file:
      - .env
    depends_on:
      postgres-produto:
        condition: service_healthy
    ports:
      - 8084:8084
    environment:
      POSTGRES_URL: ${POSTGRES_URL_PRODUTO}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE_PRODUTO}
    networks:
      - postechnetwork

  ms-gateway:
    build:
      context: ./ms-gateway
    container_name: ms_gateway
    env_file:
      - .env
    depends_on:
      - ms-cliente
      - ms-logistica
      - ms-pedido
      - ms-produto
    ports:
      - 8080:8080
    networks:
      - postechnetwork
    environment:
      JWT_SECRET: ${JWT_SECRET}

networks:
  postechnetwork:
    driver: bridge