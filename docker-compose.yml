services:
  db:
    image: 'postgres:latest'
    container_name: postgres_db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USERNAME}
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5432:5432'
    networks:
      - netpostech
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DATABASE} -U $${POSTGRES_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: 'rabbitmq:latest'
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - netpostech

  ms-cliente:
    build:
      context: ./ms-cliente
    container_name: ms_cliente
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      JWT_SECRET: ${JWT_SECRET}
    networks:
      - netpostech

  ms-logistica:
    build:
      context: ./ms-logistica
    container_name: ms_logistica
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      OPENROUTE_API_KEY: ${OPENROUTE_API_KEY}
      SERVICE_PEDIDO_URL: ${SERVICE_PEDIDO_URL}
    networks:
      - netpostech

  ms-pedido:
    build:
      context: ./ms-pedido
    container_name: ms_pedido
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      SERVICE_CLIENTE_URL: ${SERVICE_CLIENTE_URL}
      SERVICE_PRODUTO_URL: ${SERVICE_PRODUTO_URL}
    networks:
      - netpostech

  ms-produto:
    build:
      context: ./ms-produto
    container_name: ms_produto
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8084:8084"
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
    networks:
      - netpostech

  ms-gateway:
    build:
      context: ./ms-gateway
    container_name: ms_gateway
    env_file:
      - .env
    depends_on:
      - ms-cliente
      - ms-logistica
      - ms-pedido
      - ms-produto
    ports:
      - "8080:8080"
    networks:
      - netpostech
    environment:
      JWT_SECRET: ${JWT_SECRET}

networks:
  netpostech:
    driver: bridge